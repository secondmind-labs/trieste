:py:mod:`trieste.models.keras.sampler`
======================================

.. py:module:: trieste.models.keras.sampler

.. autoapi-nested-parse::

   This module is the home of the sampling functionality required by some
   of the Trieste's Keras model wrappers.



Module Contents
---------------

.. py:class:: DeepEnsembleTrajectorySampler(model: trieste.models.keras.interface.DeepEnsembleModel, diversify: bool = False)

   Bases: :py:obj:`trieste.models.interfaces.TrajectorySampler`\ [\ :py:obj:`trieste.models.keras.interface.DeepEnsembleModel`\ ]

   This class builds functions that approximate a trajectory by randomly choosing a network from
   the ensemble and using its predicted means as a trajectory. Currently we do not
   support models with multiple outputs.

   Option `diversify` can be used to increase the diversity in case of optimizing very large
   batches of trajectories. In this case the sampler will use quantiles from distributions rather
   than means as trajectories. Quantiles are sampled uniformly from a unit interval. When batch
   size is larger than the ensemble size, multiple quantiles will be used with the same network.

   :param model: The ensemble model to sample from.
   :param diversify: Whether to use quantiles from final probabilistic layer as
       trajectories (`False` by default). See class docstring for details.

   .. py:method:: get_trajectory(self) -> trieste.models.interfaces.TrajectoryFunction

      Generate an approximate function draw (trajectory) from the ensemble.

      :return: A trajectory function representing an approximate trajectory
          from the model, taking an input of shape `[N, 1, D]` and returning shape `[N, 1]`.


   .. py:method:: update_trajectory(self, trajectory: trieste.models.interfaces.TrajectoryFunction) -> trieste.models.interfaces.TrajectoryFunction

      Update a :const:`TrajectoryFunction` to reflect an update in its
      underlying :class:`DeepEnsembleModel` and resample accordingly.

      Here we rely on the underlying models being updated and we only resample the trajectory.

      :param trajectory: The trajectory function to be resampled.
      :return: The new trajectory function updated for a new model


   .. py:method:: resample_trajectory(self, trajectory: trieste.models.interfaces.TrajectoryFunction) -> trieste.models.interfaces.TrajectoryFunction

      Efficiently resample a :const:`TrajectoryFunction` in-place to avoid function retracing
      with every new sample.

      :param trajectory: The trajectory function to be resampled.
      :return: The new resampled trajectory function.



.. py:class:: deep_ensemble_trajectory(model: trieste.models.keras.interface.DeepEnsembleModel, diversify: bool)

   Bases: :py:obj:`trieste.models.interfaces.TrajectoryFunctionClass`

   Generate an approximate function draw (trajectory) by randomly choosing a batch B of
   networks from the ensemble and using their predicted means as trajectories.

   Option `diversify` can be used to increase the diversity in case of optimizing very large
   batches of trajectories. It is experimental feature and hence should be used with caution.

   Models with multiple outputs are not supported.

   :param model: The model of the objective function.
   :param diversify: Whether to use samples from final probabilistic layer as trajectories
       or mean predictions.

   .. py:method:: __call__(self, x: trieste.types.TensorType) -> trieste.types.TensorType

      Call trajectory function. Note that we are flattening the batch dimension and
      doing a forward pass with each network in the ensemble with the whole batch. This is
      somewhat wasteful, but is necessary given the underlying ``KerasEnsemble`` network
      model.


   .. py:method:: resample(self) -> None

      Efficiently resample network indices in-place, without retracing.



