:py:mod:`trieste.acquisition.interface`
=======================================

.. py:module:: trieste.acquisition.interface

.. autoapi-nested-parse::

   This module contains the interfaces relating to acquisition function --- functions that estimate
   the utility of evaluating sets of candidate points.



Module Contents
---------------

.. py:data:: AcquisitionFunction

   Type alias for acquisition functions.

   An :const:`AcquisitionFunction` maps a set of `B` query points (each of dimension `D`) to a single
   value that describes how useful it would be evaluate all these points together (to our goal of
   optimizing the objective function). Thus, with leading dimensions, an :const:`AcquisitionFunction`
   takes input shape `[..., B, D]` and returns shape `[..., 1]`.

   Note that :const:`AcquisitionFunction`s which do not support batch optimization still expect inputs
   with a batch dimension, i.e. an input of shape `[..., 1, D]`.


.. py:class:: AcquisitionFunctionClass


   Bases: :py:obj:`abc.ABC`

   An :class:`AcquisitionFunctionClass` is an acquisition function represented using a class
   rather than as a standalone function. Using a class to represent an acquisition function
   makes it easier to update it, to avoid having to retrace the function on every call.

   .. py:method:: __call__(x: trieste.types.TensorType) -> trieste.types.TensorType
      :abstractmethod:

      Call acquisition function.



.. py:class:: AcquisitionFunctionBuilder


   Bases: :py:obj:`Generic`\ [\ :py:obj:`trieste.models.interfaces.ProbabilisticModelType`\ ], :py:obj:`abc.ABC`

   An :class:`AcquisitionFunctionBuilder` builds and updates an acquisition function.

   .. py:method:: prepare_acquisition_function(models: Mapping[trieste.types.Tag, trieste.models.interfaces.ProbabilisticModelType], datasets: Optional[Mapping[trieste.types.Tag, trieste.data.Dataset]] = None) -> AcquisitionFunction
      :abstractmethod:

      Prepare an acquisition function. We assume that this requires at least models, but
      it may sometimes also need data.

      :param models: The models for each tag.
      :param datasets: The data from the observer (optional).
      :return: An acquisition function.


   .. py:method:: update_acquisition_function(function: AcquisitionFunction, models: Mapping[trieste.types.Tag, trieste.models.interfaces.ProbabilisticModelType], datasets: Optional[Mapping[trieste.types.Tag, trieste.data.Dataset]] = None) -> AcquisitionFunction

      Update an acquisition function. By default this generates a new acquisition function each
      time. However, if the function is decorated with `@tf.function`, then you can override
      this method to update its variables instead and avoid retracing the acquisition function on
      every optimization loop.

      :param function: The acquisition function to update.
      :param models: The models for each tag.
      :param datasets: The data from the observer (optional).
      :return: The updated acquisition function.



.. py:class:: SingleModelAcquisitionBuilder


   Bases: :py:obj:`Generic`\ [\ :py:obj:`trieste.models.interfaces.ProbabilisticModelType`\ ], :py:obj:`abc.ABC`

   Convenience acquisition function builder for an acquisition function (or component of a
   composite acquisition function) that requires only one model, dataset pair.

   .. py:method:: using(tag: trieste.types.Tag) -> AcquisitionFunctionBuilder[trieste.models.interfaces.ProbabilisticModelType]

      :param tag: The tag for the model, dataset pair to use to build this acquisition function.
      :return: An acquisition function builder that selects the model and dataset specified by
          ``tag``, as defined in :meth:`prepare_acquisition_function`.


   .. py:method:: prepare_acquisition_function(model: trieste.models.interfaces.ProbabilisticModelType, dataset: Optional[trieste.data.Dataset] = None) -> AcquisitionFunction
      :abstractmethod:

      :param model: The model.
      :param dataset: The data to use to build the acquisition function (optional).
      :return: An acquisition function.


   .. py:method:: update_acquisition_function(function: AcquisitionFunction, model: trieste.models.interfaces.ProbabilisticModelType, dataset: Optional[trieste.data.Dataset] = None) -> AcquisitionFunction

      :param function: The acquisition function to update.
      :param model: The model.
      :param dataset: The data from the observer (optional).
      :return: The updated acquisition function.



.. py:class:: GreedyAcquisitionFunctionBuilder


   Bases: :py:obj:`Generic`\ [\ :py:obj:`trieste.models.interfaces.ProbabilisticModelType`\ ], :py:obj:`abc.ABC`

   A :class:`GreedyAcquisitionFunctionBuilder` builds an acquisition function
   suitable for greedily building batches for batch Bayesian
   Optimization. A :class:`GreedyAcquisitionFunctionBuilder` differs
   from an :class:`AcquisitionFunctionBuilder` by requiring that a set
   of pending points is passed to the builder. Note that this acquisition function
   is typically called `B` times each Bayesian optimization step, when building batches
   of size `B`.

   .. py:method:: prepare_acquisition_function(models: Mapping[trieste.types.Tag, trieste.models.interfaces.ProbabilisticModelType], datasets: Optional[Mapping[trieste.types.Tag, trieste.data.Dataset]] = None, pending_points: Optional[trieste.types.TensorType] = None) -> AcquisitionFunction
      :abstractmethod:

      Generate a new acquisition function. The first time this is called, ``pending_points``
      will be `None`. Subsequent calls will be via ``update_acquisition_function`` below,
      unless that has been overridden.

      :param models: The models over each tag.
      :param datasets: The data from the observer (optional).
      :param pending_points: Points already chosen to be in the current batch (of shape [M,D]),
          where M is the number of pending points and D is the search space dimension.
      :return: An acquisition function.


   .. py:method:: update_acquisition_function(function: AcquisitionFunction, models: Mapping[trieste.types.Tag, trieste.models.interfaces.ProbabilisticModelType], datasets: Optional[Mapping[trieste.types.Tag, trieste.data.Dataset]] = None, pending_points: Optional[trieste.types.TensorType] = None, new_optimization_step: bool = True) -> AcquisitionFunction

      Update an acquisition function. By default this generates a new acquisition function each
      time. However, if the function is decorated with`@tf.function`, then you can override
      this method to update its variables instead and avoid retracing the acquisition function on
      every optimization loop.

      :param function: The acquisition function to update.
      :param models: The models over each tag.
      :param datasets: The data from the observer (optional).
      :param pending_points: Points already chosen to be in the current batch (of shape [M,D]),
          where M is the number of pending points and D is the search space dimension.
      :param new_optimization_step: Indicates whether this call to update_acquisition_function
          is to start of a new optimization step, of to continue collecting batch of points
          for the current step. Defaults to ``True``.
      :return: The updated acquisition function.



.. py:class:: SingleModelGreedyAcquisitionBuilder


   Bases: :py:obj:`Generic`\ [\ :py:obj:`trieste.models.interfaces.ProbabilisticModelType`\ ], :py:obj:`abc.ABC`

   Convenience acquisition function builder for a greedy acquisition function (or component of a
   composite greedy acquisition function) that requires only one model, dataset pair.

   .. py:method:: using(tag: trieste.types.Tag) -> GreedyAcquisitionFunctionBuilder[trieste.models.interfaces.ProbabilisticModelType]

      :param tag: The tag for the model, dataset pair to use to build this acquisition function.
      :return: An acquisition function builder that selects the model and dataset specified by
          ``tag``, as defined in :meth:`prepare_acquisition_function`.


   .. py:method:: prepare_acquisition_function(model: trieste.models.interfaces.ProbabilisticModelType, dataset: Optional[trieste.data.Dataset] = None, pending_points: Optional[trieste.types.TensorType] = None) -> AcquisitionFunction
      :abstractmethod:

      :param model: The model.
      :param dataset: The data from the observer (optional).
      :param pending_points: Points already chosen to be in the current batch (of shape [M,D]),
          where M is the number of pending points and D is the search space dimension.
      :return: An acquisition function.


   .. py:method:: update_acquisition_function(function: AcquisitionFunction, model: trieste.models.interfaces.ProbabilisticModelType, dataset: Optional[trieste.data.Dataset] = None, pending_points: Optional[trieste.types.TensorType] = None, new_optimization_step: bool = True) -> AcquisitionFunction

      :param function: The acquisition function to update.
      :param model: The model.
      :param dataset: The data from the observer (optional).
      :param pending_points: Points already chosen to be in the current batch (of shape [M,D]),
          where M is the number of pending points and D is the search space dimension.
      :param new_optimization_step: Indicates whether this call to update_acquisition_function
          is to start of a new optimization step, of to continue collecting batch of points
          for the current step. Defaults to ``True``.
      :return: The updated acquisition function.



.. py:class:: VectorizedAcquisitionFunctionBuilder


   Bases: :py:obj:`AcquisitionFunctionBuilder`\ [\ :py:obj:`trieste.models.interfaces.ProbabilisticModelType`\ ]

   An :class:`VectorizedAcquisitionFunctionBuilder` builds and updates a vectorized
   acquisition function These differ from normal acquisition functions only by their output shape:
   rather than returning a single value, they return one value per potential query point.
   Thus, with leading dimensions, they take input shape `[..., B, D]` and returns shape `[..., B]`.


.. py:class:: SingleModelVectorizedAcquisitionBuilder


   Bases: :py:obj:`SingleModelAcquisitionBuilder`\ [\ :py:obj:`trieste.models.interfaces.ProbabilisticModelType`\ ]

   Convenience acquisition function builder for vectorized acquisition functions (or component
   of a composite vectorized acquisition function) that requires only one model, dataset pair.

   .. py:method:: using(tag: trieste.types.Tag) -> AcquisitionFunctionBuilder[trieste.models.interfaces.ProbabilisticModelType]

      :param tag: The tag for the model, dataset pair to use to build this acquisition function.
      :return: An acquisition function builder that selects the model and dataset specified by
          ``tag``, as defined in :meth:`prepare_acquisition_function`.



.. py:data:: PenalizationFunction

   An :const:`PenalizationFunction` maps a query point (of dimension `D`) to a single
   value that described how heavily it should be penalized (a positive quantity).
   As penalization is applied multiplicatively to acquisition functions, small
   penalization outputs correspond to a stronger penalization effect. Thus, with
   leading dimensions, an :const:`PenalizationFunction` takes input
   shape `[..., 1, D]` and returns shape `[..., 1]`.


.. py:class:: UpdatablePenalizationFunction


   Bases: :py:obj:`abc.ABC`

   An :class:`UpdatablePenalizationFunction` builds and updates a penalization function.
   Defining a penalization function that can be updated avoids having to retrace on every call.

   .. py:method:: __call__(x: trieste.types.TensorType) -> trieste.types.TensorType
      :abstractmethod:

      Call penalization function..


   .. py:method:: update(pending_points: trieste.types.TensorType, lipschitz_constant: trieste.types.TensorType, eta: trieste.types.TensorType) -> None
      :abstractmethod:

      Update penalization function.



