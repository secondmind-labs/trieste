:py:mod:`trieste.objectives.single_objectives`
==============================================

.. py:module:: trieste.objectives.single_objectives

.. autoapi-nested-parse::

   This module contains toy objective functions, useful for experimentation. A number of them have been
   taken from `this Virtual Library of Simulation Experiments
   <https://web.archive.org/web/20211015101644/https://www.sfu.ca/~ssurjano/> (:cite:`ssurjano2021`)`_.



Module Contents
---------------

.. py:data:: ObjectiveTestFunction

   A synthetic test function


.. py:class:: ObjectiveTestProblem


   Convenience container class for synthetic objective test functions.

   .. py:property:: dim
      :type: int

      The input dimensionality of the test function


   .. py:property:: bounds
      :type: list[list[float]]

      The input space bounds of the test function


   .. py:attribute:: name
      :type: str

      The test function name


   .. py:attribute:: objective
      :type: ObjectiveTestFunction

      The synthetic test function


   .. py:attribute:: search_space
      :type: trieste.space.Box

      The (continuous) search space of the test function



.. py:class:: SingleObjectiveTestProblem


   Bases: :py:obj:`ObjectiveTestProblem`

   Convenience container class for synthetic single-objective test functions,
   including the global minimizers and minimum.

   .. py:attribute:: minimizers
      :type: trieste.types.TensorType

      The global minimizers of the test function.


   .. py:attribute:: minimum
      :type: trieste.types.TensorType

      The global minimum of the test function.



.. py:function:: check_objective_shapes(d: int) -> Callable[[ObjectiveTestFunction], ObjectiveTestFunction]

   Returns a decorator for checking the shape of single objective test functions.


.. py:function:: branin(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Branin-Hoo function over :math:`[0, 1]^2`. See
   :cite:`Picheny2013` for details.

   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:function:: scaled_branin(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Branin-Hoo function, rescaled to have zero mean and unit variance over :math:`[0, 1]^2`. See
   :cite:`Picheny2013` for details.

   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: Branin

   The Branin-Hoo function over :math:`[0, 1]^2`. See :cite:`Picheny2013` for details.


.. py:data:: ScaledBranin

   The Branin-Hoo function, rescaled to have zero mean and unit variance over :math:`[0, 1]^2`. See
   :cite:`Picheny2013` for details.


.. py:data:: ConstrainedScaledBranin

   The rescaled Branin-Hoo function with a combination of linear and nonlinear constraints on the
   search space.


.. py:function:: simple_quadratic(x: trieste.types.TensorType) -> trieste.types.TensorType

   A trivial quadratic function over :math:`[0, 1]^2`. Useful for quick testing.

   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: SimpleQuadratic

   A trivial quadratic function over :math:`[0, 1]^2`. Useful for quick testing.


.. py:function:: gramacy_lee(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Gramacy & Lee function, typically evaluated over :math:`[0.5, 2.5]`. See
   :cite:`gramacy2012cases` for details.

   :param x: Where to evaluate the function, with shape [..., 1].
   :return: The function values, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: GramacyLee

   The Gramacy & Lee function, typically evaluated over :math:`[0.5, 2.5]`. See
   :cite:`gramacy2012cases` for details.


.. py:function:: logarithmic_goldstein_price(x: trieste.types.TensorType) -> trieste.types.TensorType

   A logarithmic form of the Goldstein-Price function, with zero mean and unit variance over
   :math:`[0, 1]^2`. See :cite:`Picheny2013` for details.

   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: LogarithmicGoldsteinPrice

   A logarithmic form of the Goldstein-Price function, with zero mean and unit variance over
   :math:`[0, 1]^2`. See :cite:`Picheny2013` for details.


.. py:function:: hartmann_3(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Hartmann 3 test function over :math:`[0, 1]^3`. This function has 3 local
   and one global minima. See https://www.sfu.ca/~ssurjano/hart3.html for details.

   :param x: The points at which to evaluate the function, with shape [..., 3].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: Hartmann3

   The Hartmann 3 test function over :math:`[0, 1]^3`. This function has 3 local
   and one global minima. See https://www.sfu.ca/~ssurjano/hart3.html for details.


.. py:function:: shekel_4(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Shekel test function over :math:`[0, 1]^4`. This function has ten local
   minima and a single global minimum. See https://www.sfu.ca/~ssurjano/shekel.html for details.
   Note that we rescale the original problem, which is typically defined
   over `[0, 10]^4`.

   :param x: The points at which to evaluate the function, with shape [..., 4].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: Shekel4

   The Shekel test function over :math:`[0, 1]^4`. This function has ten local
   minima and a single global minimum. See https://www.sfu.ca/~ssurjano/shekel.html for details.
   Note that we rescale the original problem, which is typically defined
   over `[0, 10]^4`.


.. py:function:: levy(x: trieste.types.TensorType, d: int) -> trieste.types.TensorType

   The Levy test function over :math:`[0, 1]^d`. This function has many local
   minima and a single global minimum. See https://www.sfu.ca/~ssurjano/levy.html for details.
   Note that we rescale the original problem, which is typically defined
   over `[-10, 10]^d`, to be defined over a unit hypercube :math:`[0, 1]^d`.

   :param x: The points at which to evaluate the function, with shape [..., d].
   :param d: The dimension of the function.
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:function:: levy_8(x: trieste.types.TensorType) -> trieste.types.TensorType

   Convenience function for the 8-dimensional :func:`levy` function, with output
   normalised to unit interval

   :param x: The points at which to evaluate the function, with shape [..., 8].
   :return: The function values at ``x``, with shape [..., 1].


.. py:data:: Levy8

   Convenience function for the 8-dimensional :func:`levy` function.
   Taken from https://www.sfu.ca/~ssurjano/levy.html


.. py:function:: rosenbrock(x: trieste.types.TensorType, d: int) -> trieste.types.TensorType

   The Rosenbrock function, also known as the Banana function, is a unimodal function,
   however the minima lies in a narrow valley. Even though this valley is
   easy to find, convergence to the minimum is difficult. See
   https://www.sfu.ca/~ssurjano/rosen.html for details. Inputs are rescaled to
   be defined over a unit hypercube :math:`[0, 1]^d`.

   :param x: The points at which to evaluate the function, with shape [..., d].
   :param d: The dimension of the function.
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:function:: rosenbrock_4(x: trieste.types.TensorType) -> trieste.types.TensorType

   Convenience function for the 4-dimensional :func:`rosenbrock` function with steepness 10.
   It is rescaled to have zero mean and unit variance over :math:`[0, 1]^4. See
   :cite:`Picheny2013` for details.

   :param x: The points at which to evaluate the function, with shape [..., 4].
   :return: The function values at ``x``, with shape [..., 1].


.. py:data:: Rosenbrock4

   The Rosenbrock function, rescaled to have zero mean and unit variance over :math:`[0, 1]^4. See
   :cite:`Picheny2013` for details.
   This function (also known as the Banana function) is unimodal, however the minima
   lies in a narrow valley.


.. py:function:: ackley_5(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Ackley test function over :math:`[0, 1]^5`. This function has
   many local minima and a global minima. See https://www.sfu.ca/~ssurjano/ackley.html
   for details.
   Note that we rescale the original problem, which is typically defined
   over `[-32.768, 32.768]`.

   :param x: The points at which to evaluate the function, with shape [..., 5].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: Ackley5

   The Ackley test function over :math:`[0, 1]^5`. This function has
   many local minima and a global minima. See https://www.sfu.ca/~ssurjano/ackley.html
   for details.
   Note that we rescale the original problem, which is typically defined
   over `[-32.768, 32.768]`.


.. py:function:: hartmann_6(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Hartmann 6 test function over :math:`[0, 1]^6`. This function has
   6 local and one global minima. See https://www.sfu.ca/~ssurjano/hart6.html
   for details.

   :param x: The points at which to evaluate the function, with shape [..., 6].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: Hartmann6

   The Hartmann 6 test function over :math:`[0, 1]^6`. This function has
   6 local and one global minima. See https://www.sfu.ca/~ssurjano/hart6.html
   for details.


.. py:function:: michalewicz(x: trieste.types.TensorType, d: int = 2, m: int = 10) -> trieste.types.TensorType

   The Michalewicz function over :math:`[0, \pi]` for all i=1,...,d. Dimensionality is determined
   by the parameter ``d`` and it features steep ridges and drops. It has :math:`d!` local minima,
   and it is multimodal. The parameter ``m`` defines the steepness of they valleys and ridges; a
   larger ``m`` leads to a more difficult search. The recommended value of ``m`` is 10. See
   https://www.sfu.ca/~ssurjano/egg.html for details.

   :param x: The points at which to evaluate the function, with shape [..., d].
   :param d: The dimension of the function.
   :param m: The steepness of the valleys/ridges.
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:function:: michalewicz_2(x: trieste.types.TensorType) -> trieste.types.TensorType

   Convenience function for the 2-dimensional :func:`michalewicz` function with steepness 10.
   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].


.. py:function:: michalewicz_5(x: trieste.types.TensorType) -> trieste.types.TensorType

   Convenience function for the 5-dimensional :func:`michalewicz` function with steepness 10.
   :param x: The points at which to evaluate the function, with shape [..., 5].
   :return: The function values at ``x``, with shape [..., 1].


.. py:function:: michalewicz_10(x: trieste.types.TensorType) -> trieste.types.TensorType

   Convenience function for the 10-dimensional :func:`michalewicz` function with steepness 10.
   :param x: The points at which to evaluate the function, with shape [..., 10].
   :return: The function values at ``x``, with shape [..., 1].


.. py:data:: Michalewicz2

   Convenience function for the 2-dimensional :func:`michalewicz` function with steepness 10.
   Taken from https://arxiv.org/abs/2003.09867


.. py:data:: Michalewicz5

   Convenience function for the 5-dimensional :func:`michalewicz` function with steepness 10.
   Taken from https://arxiv.org/abs/2003.09867


.. py:data:: Michalewicz10

   Convenience function for the 10-dimensional :func:`michalewicz` function with steepness 10.
   Taken from https://arxiv.org/abs/2003.09867


.. py:function:: trid(x: trieste.types.TensorType, d: int = 10) -> trieste.types.TensorType

   The Trid function over :math:`[-d^2, d^2]` for all i=1,...,d. Dimensionality is determined
   by the parameter ``d`` and it has a global minimum. This function has large variation in
   output which makes it challenging for Bayesian optimisation with vanilla Gaussian processes
   with non-stationary kernels. Models that can deal with non-stationarities, such as deep
   Gaussian processes, can be useful for modelling these functions. See :cite:`hebbal2019bayesian`
   and https://www.sfu.ca/~ssurjano/trid.html for details.

   :param x: The points at which to evaluate the function, with shape [..., d].
   :param d: Dimensionality.
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:function:: trid_10(x: trieste.types.TensorType) -> trieste.types.TensorType

   The Trid function with dimension 10.

   :param x: The points at which to evaluate the function, with shape [..., 10].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. py:data:: Trid10

   The Trid function with dimension 10.


