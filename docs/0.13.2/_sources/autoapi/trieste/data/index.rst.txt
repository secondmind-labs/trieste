:py:mod:`trieste.data`
======================

.. py:module:: trieste.data

.. autoapi-nested-parse::

   This module contains utilities for :class:`~trieste.observer.Observer` data. 



Module Contents
---------------

.. py:class:: Dataset

   Container for the query points and corresponding observations from an
   :class:`~trieste.observer.Observer`.

   .. py:attribute:: query_points
      :annotation: :trieste.types.TensorType

      The points at which the :class:`~trieste.observer.Observer` was queried. 


   .. py:attribute:: observations
      :annotation: :trieste.types.TensorType

      The observed output of the :class:`~trieste.observer.Observer` for each query point. 


   .. py:method:: __post_init__(self) -> None

      :raise ValueError (or InvalidArgumentError): If ``query_points`` or ``observations`` have             rank less than two, or they have unequal shape in any but their last dimension.


   .. py:method:: __add__(self, rhs: Dataset) -> Dataset

      Return the :class:`Dataset` whose query points are the result of concatenating the
      `query_points` in each :class:`Dataset` along the zeroth axis, and the same for the
      `observations`. For example:

      >>> d1 = Dataset(
      ...     tf.constant([[0.1, 0.2], [0.3, 0.4]]),
      ...     tf.constant([[0.5, 0.6], [0.7, 0.8]])
      ... )
      >>> d2 = Dataset(tf.constant([[0.9, 1.0]]), tf.constant([[1.1, 1.2]]))
      >>> (d1 + d2).query_points
      <tf.Tensor: shape=(3, 2), dtype=float32, numpy=
      array([[0.1, 0.2],
             [0.3, 0.4],
             [0.9, 1. ]], dtype=float32)>
      >>> (d1 + d2).observations
      <tf.Tensor: shape=(3, 2), dtype=float32, numpy=
      array([[0.5, 0.6],
             [0.7, 0.8],
             [1.1, 1.2]], dtype=float32)>

      :param rhs: A :class:`Dataset` with the same shapes as this one, except in the zeroth
          dimension, which can have any size.
      :return: The result of concatenating the :class:`Dataset`\ s.
      :raise InvalidArgumentError: If the shapes of the `query_points` in each :class:`Dataset`
          differ in any but the zeroth dimension. The same applies for `observations`.


   .. py:method:: __len__(self) -> tensorflow.Tensor

      :return: The number of query points, or equivalently the number of observations.


   .. py:method:: astuple(self) -> tuple[trieste.types.TensorType, trieste.types.TensorType]

      **Note:** Unlike the standard library function `dataclasses.astuple`, this method does
      **not** deepcopy the attributes.

      :return: A 2-tuple of the :attr:`query_points` and :attr:`observations`.



