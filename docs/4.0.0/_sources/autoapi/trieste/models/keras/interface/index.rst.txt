:orphan:

:py:mod:`trieste.models.keras.interface`
========================================

.. py:module:: trieste.models.keras.interface


Module Contents
---------------

.. py:class:: KerasPredictor(optimizer: Optional[trieste.models.optimizer.KerasOptimizer] = None, encoder: trieste.space.EncoderFunction | None = None)


   Bases: :py:obj:`trieste.models.interfaces.EncodedProbabilisticModel`, :py:obj:`abc.ABC`

   This is an interface for trainable wrappers of TensorFlow and Keras neural network models.

   :param optimizer: The optimizer wrapper containing the optimizer with which to train the
       model and arguments for the wrapper and the optimizer. The optimizer must
       be an instance of a :class:`~tf.optimizers.Optimizer`. Defaults to
       :class:`~tf.optimizers.Adam` optimizer with default parameters.
   :param encoder: Optional encoder with which to transform query points before
       generating predictions.
   :raise ValueError: If the optimizer is not an instance of :class:`~tf.optimizers.Optimizer`.

   .. py:property:: model
      :type: tensorflow.keras.Model
      :abstractmethod:

      The compiled Keras model.


   .. py:property:: optimizer
      :type: trieste.models.optimizer.KerasOptimizer

      The optimizer wrapper for training the model.


   .. py:property:: encoder
      :type: trieste.space.EncoderFunction | None

      Query point encoder.


   .. py:method:: predict_encoded(query_points: trieste.types.TensorType) -> tuple[trieste.types.TensorType, trieste.types.TensorType]

      Implementation of predict on encoded query points.


   .. py:method:: sample_encoded(query_points: trieste.types.TensorType, num_samples: int) -> trieste.types.TensorType
      :abstractmethod:

      Implementation of sample on encoded query points.


   .. py:method:: log(dataset: Optional[trieste.data.Dataset] = None) -> None

      Log model-specific information at a given optimization step.

      :param dataset: Optional data that can be used to log additional data-based model summaries.



.. py:class:: DeepEnsembleModel


   Bases: :py:obj:`trieste.models.interfaces.ProbabilisticModel`, :py:obj:`typing_extensions.Protocol`

   This is an interface for deep ensemble type of model, primarily for usage by trajectory
   samplers, to avoid circular imports. These models can act as probabilistic models
   by deriving estimates of epistemic uncertainty from the diversity of predictions made by
   individual models in the ensemble.

   .. py:property:: ensemble_size
      :type: int
      :abstractmethod:

      Returns the size of the ensemble, that is, the number of base learners or individual
      models in the ensemble.


   .. py:property:: num_outputs
      :type: int
      :abstractmethod:

      Returns the number of outputs trained on by each member network.


   .. py:property:: dtype
      :type: tensorflow.DType
      :abstractmethod:

      The prediction dtype.


   .. py:method:: ensemble_distributions(query_points: trieste.types.TensorType) -> tuple[tensorflow_probability.distributions.Distribution, Ellipsis]
      :abstractmethod:

      Return distributions for each member of the ensemble. Type of the output will depend on the
      subclass, it might be a predicted value or a distribution.

      :param query_points: The points at which to return outputs.
      :return: The outputs for the observations at the specified ``query_points`` for each member
          of the ensemble.



