:py:mod:`trieste.ask_tell_optimization`
=======================================

.. py:module:: trieste.ask_tell_optimization

.. autoapi-nested-parse::

   This module contains the Ask/Tell API for users of Trieste who would like to
   perform Bayesian Optimization with external control of the optimization loop.



Module Contents
---------------

.. py:data:: StateType

   Unbound type variable. 


.. py:data:: SearchSpaceType

   Type variable bound to :class:`SearchSpace`. 


.. py:data:: ProbabilisticModelType

   Contravariant type variable bound to :class:`ProbabilisticModel`. 


.. py:class:: AskTellOptimizerState


   Bases: :py:obj:`Generic`\ [\ :py:obj:`StateType`\ , :py:obj:`ProbabilisticModelType`\ ]

   Internal state for an Ask/Tell optimizer. This can be obtained using the optimizer's
   `to_state` method, and can be used to initialise a new instance of the optimizer.

   .. py:attribute:: record
      :type: trieste.bayesian_optimizer.Record[StateType, ProbabilisticModelType]

      A record of the current state of the optimization. 


   .. py:attribute:: local_data_ixs
      :type: Optional[Sequence[trieste.types.TensorType]]

      Indices to the local data, for LocalDatasetsAcquisitionRule rules
      when `track_data` is `False`. 



.. py:class:: AskTellOptimizerABC(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerABC(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType, SearchSpaceType, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerABC(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType], acquisition_state: StateType | None, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerABC(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerABC(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType, SearchSpaceType, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerABC(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType], acquisition_state: StateType | None = None, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)


   Bases: :py:obj:`abc.ABC`, :py:obj:`Generic`\ [\ :py:obj:`SearchSpaceType`\ , :py:obj:`ProbabilisticModelType`\ ]

   This class provides Ask/Tell optimization interface. It is designed for those use cases
   when control of the optimization loop by Trieste is impossible or not desirable.
   For the default use case with model training, refer to :class:`AskTellOptimizer`.
   For more details about the Bayesian Optimization routine, refer to :class:`BayesianOptimizer`.

   :param search_space: The space over which to search for the next query point.
   :param datasets: Already observed input-output pairs for each tag.
   :param models: The model to use for each :class:`~trieste.data.Dataset` in
       ``datasets``.
   :param acquisition_rule: The acquisition rule, which defines how to search for a new point
       on each optimization step. Defaults to
       :class:`~trieste.acquisition.rule.EfficientGlobalOptimization` with default
       arguments. Note that if the default is used, this implies the tags must be
       `OBJECTIVE` and the search space can be any :class:`~trieste.space.SearchSpace`.
   :param acquisition_state: The optional acquisition state for stateful acquisitions.
   :param fit_model: If `True` (default), models passed in will be optimized on the given data.
       If `False`, the models are assumed to be optimized already.
   :param track_data: If `True` (default), the optimizer will track the changing
       datasets via a local copy. If `False`, it will infer new datasets from
       updates to the global datasets (optionally using `local_data_ixs` and indices passed
       in to `tell`).
   :param local_data_ixs: Indices to the local data in the initial datasets. If unspecified,
       assumes that the initial datasets are global.
   :raise ValueError: If any of the following are true:
       - the keys in ``datasets`` and ``models`` do not match
       - ``datasets`` or ``models`` are empty
       - default acquisition is used but incompatible with other inputs

   .. py:property:: datasets
      :type: Mapping[trieste.types.Tag, trieste.data.Dataset]

      The current datasets.


   .. py:property:: dataset
      :type: trieste.data.Dataset

      The current dataset when there is just one dataset.


   .. py:property:: local_data_ixs
      :type: Optional[Sequence[trieste.types.TensorType]]

      Indices to the local data. Only stored for LocalDatasetsAcquisitionRule rules
      when `track_data` is `False`.


   .. py:property:: models
      :type: Mapping[trieste.types.Tag, ProbabilisticModelType]

      The current models.


   .. py:property:: model
      :type: trieste.models.ProbabilisticModel

      The current model when there is just one model.


   .. py:property:: acquisition_state
      :type: StateType | None

      The current acquisition state.


   .. py:method:: update_model(model: ProbabilisticModelType, dataset: trieste.data.Dataset) -> None
      :abstractmethod:

      Update the model on the specified dataset, for example by training.
      Called during the Tell stage and optionally at initial fitting.


   .. py:method:: __repr__() -> str

      Print-friendly string representation


   .. py:method:: dataset_len(datasets: Mapping[trieste.types.Tag, trieste.data.Dataset]) -> int
      :classmethod:

      Helper method for inferring the global dataset size.


   .. py:method:: from_record(record: trieste.bayesian_optimizer.Record[StateType, ProbabilisticModelType] | trieste.bayesian_optimizer.FrozenRecord[StateType, ProbabilisticModelType], search_space: SearchSpaceType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType | trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType] | None = None, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None) -> AskTellOptimizerType
      :classmethod:

      Creates new :class:`~AskTellOptimizer` instance from provided optimization state.
      Model training isn't triggered upon creation of the instance.

      :param record: Optimization state record.
      :param search_space: The space over which to search for the next query point.
      :param acquisition_rule: The acquisition rule, which defines how to search for a new point
          on each optimization step. Defaults to
          :class:`~trieste.acquisition.rule.EfficientGlobalOptimization` with default
          arguments.
      :param track_data: Whether the optimizer tracks the changing datasets via a local copy.
      :param local_data_ixs: Indices to local data for local rules with `track_data` False.
      :return: New instance of :class:`~AskTellOptimizer`.


   .. py:method:: to_record(copy: bool = True) -> trieste.bayesian_optimizer.Record[StateType, ProbabilisticModelType]

      Collects the current state of the optimization, which includes datasets,
      models and acquisition state (if applicable).

      :param copy: Whether to return a copy of the current state or the original. Copying
          is not supported for all model types. However, continuing the optimization will
          modify the original state.
      :return: An optimization state record.


   .. py:method:: to_result(copy: bool = True) -> trieste.bayesian_optimizer.OptimizationResult[StateType, ProbabilisticModelType]

      Converts current state of the optimization
      into a :class:`~trieste.data.OptimizationResult` object.

      :param copy: Whether to return a copy of the current state or the original. Copying
          is not supported for all model types. However, continuing the optimization will
          modify the original state.
      :return: A :class:`~trieste.data.OptimizationResult` object.


   .. py:method:: from_state(state: AskTellOptimizerState[StateType, ProbabilisticModelType], search_space: SearchSpaceType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType | trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType] | None = None, track_data: bool = True) -> AskTellOptimizerType
      :classmethod:

      Creates new :class:`~AskTellOptimizer` instance from provided AskTellOptimizer state.
      Model training isn't triggered upon creation of the instance.

      :param state: AskTellOptimizer state.
      :param search_space: The space over which to search for the next query point.
      :param acquisition_rule: The acquisition rule, which defines how to search for a new point
          on each optimization step. Defaults to
          :class:`~trieste.acquisition.rule.EfficientGlobalOptimization` with default
          arguments.
      :param track_data: Whether the optimizer tracks the changing datasets via a local copy.
      :return: New instance of :class:`~AskTellOptimizer`.


   .. py:method:: to_state(copy: bool = False) -> AskTellOptimizerState[StateType, ProbabilisticModelType]

      Returns the AskTellOptimizer state, comprising the current optimization state
      alongside any internal AskTellOptimizer state.

      :param copy: Whether to return a copy of the current state or the original. Copying
          is not supported for all model types. However, continuing the optimization will
          modify the original state.
      :return: An :class:`AskTellOptimizerState` object.


   .. py:method:: ask() -> trieste.types.TensorType

      Suggests a point (or points in batch mode) to observe by optimizing the acquisition
      function. If the acquisition is stateful, its state is saved.

      :return: A :class:`TensorType` instance representing suggested point(s).


   .. py:method:: tell(new_data: Mapping[trieste.types.Tag, trieste.data.Dataset] | trieste.data.Dataset, new_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None) -> None

      Updates optimizer state with new data.

      :param new_data: New observed data. If `track_data` is `False`, this refers to all
          the data.
      :param new_data_ixs: Indices to the new observed local data, if `track_data` is `False`.
          If unspecified, inferred from the change in dataset sizes.
      :raise ValueError: If keys in ``new_data`` do not match those in already built dataset.



.. py:data:: TrainableProbabilisticModelType

   Contravariant type variable bound to :class:`TrainableProbabilisticModel`. 


.. py:class:: AskTellOptimizer(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizer(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType, SearchSpaceType, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizer(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType], acquisition_state: StateType | None, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizer(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizer(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType, SearchSpaceType, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizer(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType], acquisition_state: StateType | None = None, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)


   Bases: :py:obj:`AskTellOptimizerABC`\ [\ :py:obj:`SearchSpaceType`\ , :py:obj:`TrainableProbabilisticModelType`\ ]

   This class provides Ask/Tell optimization interface with the default model training
   using the TrainableProbabilisticModel interface.

   :param search_space: The space over which to search for the next query point.
   :param datasets: Already observed input-output pairs for each tag.
   :param models: The model to use for each :class:`~trieste.data.Dataset` in
       ``datasets``.
   :param acquisition_rule: The acquisition rule, which defines how to search for a new point
       on each optimization step. Defaults to
       :class:`~trieste.acquisition.rule.EfficientGlobalOptimization` with default
       arguments. Note that if the default is used, this implies the tags must be
       `OBJECTIVE` and the search space can be any :class:`~trieste.space.SearchSpace`.
   :param acquisition_state: The optional acquisition state for stateful acquisitions.
   :param fit_model: If `True` (default), models passed in will be optimized on the given data.
       If `False`, the models are assumed to be optimized already.
   :param track_data: If `True` (default), the optimizer will track the changing
       datasets via a local copy. If `False`, it will infer new datasets from
       updates to the global datasets (optionally using `local_data_ixs` and indices passed
       in to `tell`).
   :param local_data_ixs: Indices to the local data in the initial datasets. If unspecified,
       assumes that the initial datasets are global.
   :raise ValueError: If any of the following are true:
       - the keys in ``datasets`` and ``models`` do not match
       - ``datasets`` or ``models`` are empty
       - default acquisition is used but incompatible with other inputs

   .. py:method:: update_model(model: TrainableProbabilisticModelType, dataset: trieste.data.Dataset) -> None

      Update the model on the specified dataset, for example by training.
      Called during the Tell stage and optionally at initial fitting.



.. py:class:: AskTellOptimizerNoTraining(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerNoTraining(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType, SearchSpaceType, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerNoTraining(search_space: SearchSpaceType, datasets: Mapping[trieste.types.Tag, trieste.data.Dataset], models: Mapping[trieste.types.Tag, ProbabilisticModelType], acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType], acquisition_state: StateType | None, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerNoTraining(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerNoTraining(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.TensorType, SearchSpaceType, ProbabilisticModelType], *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)
              AskTellOptimizerNoTraining(search_space: SearchSpaceType, datasets: trieste.data.Dataset, models: ProbabilisticModelType, acquisition_rule: trieste.acquisition.rule.AcquisitionRule[trieste.types.State[StateType | None, trieste.types.TensorType], SearchSpaceType, ProbabilisticModelType], acquisition_state: StateType | None = None, *, fit_model: bool = True, track_data: bool = True, local_data_ixs: Optional[Sequence[trieste.types.TensorType]] = None)


   Bases: :py:obj:`AskTellOptimizerABC`\ [\ :py:obj:`SearchSpaceType`\ , :py:obj:`ProbabilisticModelType`\ ]

   This class provides Ask/Tell optimization interface with no model training performed
   during the Tell stage or at initialization.

   :param search_space: The space over which to search for the next query point.
   :param datasets: Already observed input-output pairs for each tag.
   :param models: The model to use for each :class:`~trieste.data.Dataset` in
       ``datasets``.
   :param acquisition_rule: The acquisition rule, which defines how to search for a new point
       on each optimization step. Defaults to
       :class:`~trieste.acquisition.rule.EfficientGlobalOptimization` with default
       arguments. Note that if the default is used, this implies the tags must be
       `OBJECTIVE` and the search space can be any :class:`~trieste.space.SearchSpace`.
   :param acquisition_state: The optional acquisition state for stateful acquisitions.
   :param fit_model: If `True` (default), models passed in will be optimized on the given data.
       If `False`, the models are assumed to be optimized already.
   :param track_data: If `True` (default), the optimizer will track the changing
       datasets via a local copy. If `False`, it will infer new datasets from
       updates to the global datasets (optionally using `local_data_ixs` and indices passed
       in to `tell`).
   :param local_data_ixs: Indices to the local data in the initial datasets. If unspecified,
       assumes that the initial datasets are global.
   :raise ValueError: If any of the following are true:
       - the keys in ``datasets`` and ``models`` do not match
       - ``datasets`` or ``models`` are empty
       - default acquisition is used but incompatible with other inputs

   .. py:method:: update_model(model: ProbabilisticModelType, dataset: trieste.data.Dataset) -> None

      Update the model on the specified dataset, for example by training.
      Called during the Tell stage and optionally at initial fitting.



